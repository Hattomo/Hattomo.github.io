[{"content":"はじめに Lineには、トーク履歴をエクスポートする機能が付いています。これをPythonを使って解析し、合計メッセージ数、それぞれのメッセージ数、合計文字数、それぞれのメッセージ数、Line電話の時間の合計をそれぞれの月について算出する方法です。筆者は、電子機器の言語を英語に設定しているため、日本語を使用されている方は、履歴のファイル名や内容が日本語表記になっていることが予想されます。適宜読み替えてください。\nLineからトーク履歴をエクスポートする これは、PCでもスマホでもできますが、PCとスマホでは、エクスポートされたトーク履歴のフォーマットが微妙に違うことやPCでは、エクスポートできるトーク履歴が会話全体の一部でしかないため、今回はスマホでエクスポートし、PCに送りました。\nトーク履歴をCSVに変換する エクスポートされたファイルは、[LINE] Chat with [friend name].txtとなっていました。フォーマットは以下のようでした。うーん、このフォーマットは使いにくい気が\u0026hellip;\n~略~ 2021/03/03 Wed 10:15\tfrinds account name 次の電話は明日の18時半がいいです。 11:37\tmy account name [Sticker] ~略~ 日時、タブ、アカウント名、タブ、メッセージとなっています。 Lineには様々な機能が付いています。テキストメッセージ、写真、動画、スタンプ、電話、アルバム、メッセージの取り消しなどのシステムメッセージ\u0026hellip;。これらは履歴の中では、特定の形で表現されているので、それぞれの履歴がどの種類のメッセージであるかを正規表現を使って分け、csvに変換していきます。csvの形式は年,月,日,時,分,送信者,内容,flagとします。flagについては後述します。\n履歴ファイルを読み込む 履歴ファイルを読み込みます。\nfile_path = \u0026#34;[LINE] Chat with [freind name].txt\u0026#34; with open(file_path, \u0026#39;r\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) as f: log_text = f.read() 正規表現を設定する それぞれのメッセージ種別について正規表現を設定していきます。\n# 日時データ date_pattern = r\u0026#34;20\\d{2}/\\d{2}/\\d{2} (Mon|Tue|Wed|Thu|Fri|Sat|Sun)\u0026#34; # テキストメッセージデータ message_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t.*\u0026#34; # 写真のデータ photo_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[Photo]\u0026#34; # スタンプのデータ sticker_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[Sticker]\u0026#34; # ビデオデータ video_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[Video]\u0026#34; # ファイルのデータ file_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[File]\u0026#34; # アルバム作成、名前変更、削除のデータ album_build_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[Albums].*\u0026#34; album_rename_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.* changed the name of the album.*\u0026#34; album_delete_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.* delete the album.*\u0026#34; # 電話のデータ関係 missed_call_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t☎ Missed call\u0026#34; canceled_call_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t☎ Canceled call\u0026#34; no_answer_call_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t☎ No answer\u0026#34; call_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t☎ Call time (\\d{1,2}:\\d{2}|\\d{1,2}:\\d{2}:\\d{2})\u0026#34; # システムのデータ、送信取り消し sys_unsent_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.* unsent a message.\u0026#34; データを正規表現に沿って解析する re.match()で正規表現に当てはまっているかを確認し、当てはまっていたら、タブでデータを分割したのち、Data型にデータを格納し、リストlogに追加していきます。データ型のflagという変数はデータの種類を示しており、以下のように設定しています。\n# flag # 0 : talk meassge # 10 : call # 11 : missed call # 12 : canceled call # 13 : no answer call # 2 : photo # 3 : video # 4 : sticker # 50 : system message unsent # 60 : file # 70 : create and add album # 71 : changed the name of the album # 72 : deleted the album class Data(): def __init__(self, year, month, day, hour, minute, person, payload, flag): self.year = year self.month = month self.day = day self.hour = hour self.minute = minute self.person = person self.payload = payload self.flag = flag date_ = datetime.datetime.now() logs = [] # 履歴の最初の2行はエクスポートした時間と空白の行なのでとばし、3行目から解析する for i, log in enumerate(log_text.splitlines()[3:]): #print(f\u0026#34;{log} : \u0026#34;, end=\u0026#39;\u0026#39;) if log == \u0026#39;\u0026#39;: #print(\u0026#34;no data\u0026#34;) continue date_stamp = \u0026#34;\u0026#34; if re.match(date_pattern, log): #print(\u0026#34;day data\u0026#34;) date_stamp = log.replace(\u0026#39;/\u0026#39;, \u0026#39;,\u0026#39;).replace(\u0026#39; \u0026#39;, \u0026#39;,\u0026#39;)[0:10] date_ = datetime.datetime.strptime(date_stamp, \u0026#39;%Y,%m,%d\u0026#39;) elif re.match(photo_pattern, log): #print(\u0026#34;photo data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], \u0026#34;\u0026#34;, 2)) elif re.match(video_pattern, log): #print(\u0026#34;Video data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], \u0026#34;\u0026#34;, 3)) # ~略~ csvを保存する 以下のコードでcsvファイルを保存します。line.csvというファイルに保存されます。\nwith open(\u0026#39;line.csv\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;, newline=\u0026#34;\u0026#34;) as f: for content in logs: writer = csv.writer(f) writer.writerow([str(content.year), str(content.month), str(content.day), str(content.hour),str(content.minute), str(content.person), str(content.payload), str(content.flag)]) トーク履歴をCSVに変換するコードの全体 ここまでのコードの全体です\n# -*- coding: utf-8 -*- import re import csv import datetime import os import sys class Data(): # flag # 0 : talk meassge # 10 : call # 11 : missed call # 12 : canceled call # 13 : no answer call # 2 : photo # 3 : video # 4 : sticker # 50 : system message unsent # 60 : file # 70 : create and add album # 71 : changed the name of the album # 72 : deleted the album def __init__(self, year, month, day, hour, minute, person, payload, flag): self.year = year self.month = month self.day = day self.hour = hour self.minute = minute self.person = person self.payload = payload self.flag = flag # disable #print # sys.stdout = open(os.devnull, \u0026#39;w\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) file_path = \u0026#34;[LINE] Chat with friend.txt\u0026#34; date_ = datetime.datetime.now() logs = [] # open file and load data with open(file_path, \u0026#39;r\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) as f: log_text = f.read() date_pattern = r\u0026#34;20\\d{2}/\\d{2}/\\d{2} (Mon|Tue|Wed|Thu|Fri|Sat|Sun)\u0026#34; message_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t.*\u0026#34; photo_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[Photo]\u0026#34; sticker_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[Sticker]\u0026#34; video_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[Video]\u0026#34; file_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[File]\u0026#34; album_build_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t\\[Albums].*\u0026#34; album_rename_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.* changed the name of the album.*\u0026#34; album_delete_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.* delete the album.*\u0026#34; missed_call_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t☎ Missed call\u0026#34; canceled_call_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t☎ Canceled call\u0026#34; no_answer_call_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t☎ No answer\u0026#34; call_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.*\\t☎ Call time (\\d{1,2}:\\d{2}|\\d{1,2}:\\d{2}:\\d{2})\u0026#34; sys_unsent_pattern = r\u0026#34;\\d{2}:\\d{2}\\t.* unsent a message.\u0026#34; for i, log in enumerate(log_text.splitlines()[3:]): #print(f\u0026#34;{log} : \u0026#34;, end=\u0026#39;\u0026#39;) if log == \u0026#39;\u0026#39;: #print(\u0026#34;no data\u0026#34;) continue date_stamp = \u0026#34;\u0026#34; if re.match(date_pattern, log): #print(\u0026#34;day data\u0026#34;) date_stamp = log.replace(\u0026#39;/\u0026#39;, \u0026#39;,\u0026#39;).replace(\u0026#39; \u0026#39;, \u0026#39;,\u0026#39;)[0:10] date_ = datetime.datetime.strptime(date_stamp, \u0026#39;%Y,%m,%d\u0026#39;) elif re.match(photo_pattern, log): #print(\u0026#34;photo data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], \u0026#34;\u0026#34;, 2)) elif re.match(video_pattern, log): #print(\u0026#34;Video data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], \u0026#34;\u0026#34;, 3)) elif re.match(sticker_pattern, log): #print(\u0026#34;Sticker data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], \u0026#34;\u0026#34;, 4)) elif re.match(call_pattern, log): #print(\u0026#34;call data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) time_data = splited_log[2][12:] time_data = re.split(\u0026#39;:\u0026#39;, time_data) time_length = 0 for i in range(len(time_data)): time_length += int(time_data[len(time_data) - i - 1]) * (60 ** i) # print(time_length) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], time_length, 10)) elif re.match(missed_call_pattern, log): #print(\u0026#34;Missed call data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], \u0026#34;\u0026#34;, 11)) elif re.match(canceled_call_pattern, log): #print(\u0026#34;Canceled call data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], \u0026#34;\u0026#34;, 12)) elif re.match(no_answer_call_pattern, log): #print(\u0026#34;no answer call data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], \u0026#34;\u0026#34;, 13)) elif re.match(sys_unsent_pattern, log): #print(\u0026#34;sys unsent data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], \u0026#34;\u0026#34;, \u0026#34;\u0026#34;, 50)) elif re.match(file_pattern, log): #print(\u0026#34;file data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], \u0026#34;\u0026#34;, \u0026#34;\u0026#34;, 60)) elif re.match(album_build_pattern, log): #print(\u0026#34;create album data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], \u0026#34;\u0026#34;, \u0026#34;\u0026#34;, 70)) elif re.match(album_rename_pattern, log): #print(\u0026#34;rename album data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], \u0026#34;\u0026#34;, \u0026#34;\u0026#34;,71)) elif re.match(album_delete_pattern, log): #print(\u0026#34;delete album data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], \u0026#34;\u0026#34;, \u0026#34;\u0026#34;, 72)) elif re.match(message_pattern, log): #print(\u0026#34;message data\u0026#34;) splited_log = re.split(\u0026#39;\\t\u0026#39;, log) logs.append(Data(date_.year, date_.month, date_.day, splited_log[0][0:2], splited_log[0][3:5], splited_log[1], splited_log[2], 0)) elif (len(re.split(\u0026#39;\\t\u0026#39;, log)) == 1): splited_log = re.split(\u0026#39;\\t\u0026#39;, log) #print(\u0026#34;returned data\u0026#34;) logs[-1].payload += log else: pass #print(\u0026#34;\\nNo classified data\\n\u0026#34;) with open(\u0026#39;line.csv\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;, newline=\u0026#34;\u0026#34;) as f: for content in logs: writer = csv.writer(f) writer.writerow([str(content.year), str(content.month), str(content.day), str(content.hour),str(content.minute), str(content.person), str(content.payload), str(content.flag)]) print(\u0026#34;Success🎉\u0026#34;) CSVを解析するし、グラフを生成する CSVの解析にはpandas、グラフの生成にはmatplotlibをpandasのラッパーを通して利用してます。ラッパーなので生成されるグラフはmatplotlibそのものです。\nCSVを読み込む CSVをpandasを利用して読み込みます\nfile_path = \u0026#34;line.csv\u0026#34; df = pd.read_csv(file_path, names=(\u0026#39;year\u0026#39;, \u0026#39;month\u0026#39;, \u0026#39;day\u0026#39;, \u0026#39;hour\u0026#39;, \u0026#39;minute\u0026#39;, \u0026#39;person\u0026#39;, \u0026#39;payloads\u0026#39;, \u0026#39;flag\u0026#39;), encoding=\u0026#34;UTF-8\u0026#34;) 全体の月別メッセージ数 pandasのgroupby機能によって月ごとのメッセージ数を数えます。これをグラフにします。ほかのデータを解析する場合も基本は同様です。これを少し変えることで、曜日別や時間別なども簡単に作ることができそうです。\nmonth_message = df[[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;flag\u0026#34;] ].groupby([\u0026#39;year\u0026#39;, \u0026#39;month\u0026#39;]).count() month_message.plot(y=\u0026#39;flag\u0026#39;, kind=\u0026#39;bar\u0026#39;, label=\u0026#34;count\u0026#34;, figsize=figsize) plt.ylabel(\u0026#34;message count\u0026#34;) plt.legend() plt.ylim(0,) plt.title(\u0026#39;message\u0026#39;) plt.savefig(\u0026#39;message_count.png\u0026#39;) 人ごとの月別メッセージ数 pandasでは、クロスタブを利用することで、簡単にクロス集計分析を行うことができます\nperson_month_message = pd.crosstab([df[\u0026#39;year\u0026#39;], df[\u0026#34;month\u0026#34;]], df[\u0026#39;person\u0026#39;]) person_month_message.plot(kind=\u0026#39;line\u0026#39;, figsize=figsize) plt.title(\u0026#34;message count by person\u0026#34;) plt.ylabel(\u0026#34;count\u0026#34;) plt.ylim(0,) plt.savefig(\u0026#39;message_count_by_person.png\u0026#39;) 月別電話時間 電話のflagは10なのでまずは、csvからそのデータを取り出します。さらに電話時間はCSVに秒で記録されておりそのままでは、値が大きく理解しずらいため、3600でわり、時間にしました。\ncall_time = df[df[\u0026#39;flag\u0026#39;] == 10] call_time = call_time[[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;payloads\u0026#34;]] call_time = call_time.astype(\u0026#39;int64\u0026#39;).groupby([\u0026#39;year\u0026#39;, \u0026#39;month\u0026#39;]).sum() / 3600 call_time.plot(y=\u0026#39;payloads\u0026#39;, kind=\u0026#39;bar\u0026#39;, label=\u0026#39;time\u0026#39;, figsize=figsize) plt.ylabel(\u0026#34;time(hours)\u0026#34;) plt.legend() plt.ylim(0,) plt.title(\u0026#39;Call Time\u0026#39;) plt.savefig(\u0026#39;call_time.png\u0026#39;) 月別メッセージの文字数の合計 charというcolumnを作成し、そこにメッセージの文字数を入れたあとメッセージ数を数えた時と同じように、集計を行いました。\n# メッセージを取り出す char_count_data = df[df[\u0026#39;flag\u0026#39;] == 0] # charというcolumnを作成し、そこにメッセージの文字数を入れる char_count_data[\u0026#34;char\u0026#34;] = char_count_data[\u0026#34;payloads\u0026#34;].apply(lambda x: len(x)) char_count = char_count_data[[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;char\u0026#34;]] char_count = char_count.astype(\u0026#39;int64\u0026#39;).groupby([\u0026#39;year\u0026#39;, \u0026#39;month\u0026#39;]).sum() char_count.plot(y=\u0026#39;char\u0026#39;, kind=\u0026#39;bar\u0026#39;, label=\u0026#39;char\u0026#39;, figsize=figsize) plt.ylabel(\u0026#34;char\u0026#34;) plt.legend() plt.ylim(0,) plt.title(\u0026#39;char data\u0026#39;) plt.savefig(\u0026#39;char_count.png\u0026#39;) 人べつ月ごとの文字数の合計 月別メッセージの文字数の合計で作成したデータフレームを再利用し人べつのデータを作成します。\nchar_count_by_person = char_count_data[[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;person\u0026#34;, \u0026#34;char\u0026#34;]] char_count_by_person[\u0026#34;char\u0026#34;].astype(\u0026#39;int64\u0026#39;) char_count_by_person = pd.pivot_table( char_count_by_person, values=\u0026#34;char\u0026#34;, index=[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;], columns=\u0026#34;person\u0026#34;, aggfunc=\u0026#34;sum\u0026#34; ) char_count_by_person.plot(kind=\u0026#39;line\u0026#39;, figsize=figsize) plt.ylabel(\u0026#34;char\u0026#34;) plt.title(\u0026#39;Char by person\u0026#39;) plt.ylim(0,) plt.legend() plt.savefig(\u0026#39;char_count_by_person.png\u0026#39;) 解析するコードの全体 # -*- coding: utf-8 -*- import pandas as pd import matplotlib.pyplot as plt file_path = \u0026#34;line.csv\u0026#34; figsize = (12, 8) df = pd.read_csv(file_path, names=(\u0026#39;year\u0026#39;, \u0026#39;month\u0026#39;, \u0026#39;day\u0026#39;, \u0026#39;hour\u0026#39;, \u0026#39;minute\u0026#39;, \u0026#39;person\u0026#39;, \u0026#39;payloads\u0026#39;, \u0026#39;flag\u0026#39;), encoding=\u0026#34;UTF-8\u0026#34;) month_message = df[[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;flag\u0026#34;] ].groupby([\u0026#39;year\u0026#39;, \u0026#39;month\u0026#39;]).count() month_message.plot(y=\u0026#39;flag\u0026#39;, kind=\u0026#39;bar\u0026#39;, label=\u0026#34;count\u0026#34;, figsize=figsize) plt.ylabel(\u0026#34;message count\u0026#34;) plt.legend() plt.ylim(0,) plt.title(\u0026#39;message\u0026#39;) plt.savefig(\u0026#39;message_count.png\u0026#39;) person_month_message = pd.crosstab([df[\u0026#39;year\u0026#39;], df[\u0026#34;month\u0026#34;]], df[\u0026#39;person\u0026#39;]) person_month_message.plot(kind=\u0026#39;line\u0026#39;, figsize=figsize) plt.title(\u0026#34;message count by person\u0026#34;) plt.ylabel(\u0026#34;count\u0026#34;) plt.ylim(0,) plt.savefig(\u0026#39;message_count_by_person.png\u0026#39;) call_time = df[df[\u0026#39;flag\u0026#39;] == 10] call_time = call_time[[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;payloads\u0026#34;]] newdf = pd.DataFrame([[2018, 3, 0], [2018, 10, 0], [2018, 12, 0], [2019, 1, 0], [2019, 3, 0], [2019, 5, 0], [2020, 10, 0], [2020, 11, 0], [2021, 2, 0], ], columns=[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;payloads\u0026#34;]) call_time.append(newdf, ignore_index=True) call_time = call_time.append(newdf) call_time = call_time.astype(\u0026#39;int64\u0026#39;).groupby([\u0026#39;year\u0026#39;, \u0026#39;month\u0026#39;]).sum() / 3600 call_time.plot(y=\u0026#39;payloads\u0026#39;, kind=\u0026#39;bar\u0026#39;, label=\u0026#39;time\u0026#39;, figsize=figsize) plt.ylabel(\u0026#34;time(hours)\u0026#34;) plt.legend() plt.ylim(0,) plt.title(\u0026#39;Call Time\u0026#39;) plt.savefig(\u0026#39;call_time.png\u0026#39;) char_count_data = df[df[\u0026#39;flag\u0026#39;] == 0] char_count_data[\u0026#34;char\u0026#34;] = char_count_data[\u0026#34;payloads\u0026#34;].apply(lambda x: len(x)) char_count = char_count_data[[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;char\u0026#34;]] char_count = char_count.astype(\u0026#39;int64\u0026#39;).groupby([\u0026#39;year\u0026#39;, \u0026#39;month\u0026#39;]).sum() char_count.plot(y=\u0026#39;char\u0026#39;, kind=\u0026#39;bar\u0026#39;, label=\u0026#39;char\u0026#39;, figsize=figsize) plt.ylabel(\u0026#34;char\u0026#34;) plt.legend() plt.ylim(0,) plt.title(\u0026#39;char data\u0026#39;) plt.savefig(\u0026#39;char_count.png\u0026#39;) char_count_by_person = char_count_data[[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;, \u0026#34;person\u0026#34;, \u0026#34;char\u0026#34;]] char_count_by_person[\u0026#34;char\u0026#34;].astype(\u0026#39;int64\u0026#39;) char_count_by_person = pd.pivot_table( char_count_by_person, values=\u0026#34;char\u0026#34;, index=[\u0026#34;year\u0026#34;, \u0026#34;month\u0026#34;], columns=\u0026#34;person\u0026#34;, aggfunc=\u0026#34;sum\u0026#34; ) char_count_by_person.plot(kind=\u0026#39;line\u0026#39;, figsize=figsize) plt.ylabel(\u0026#34;char\u0026#34;) plt.title(\u0026#39;Char by person\u0026#39;) plt.ylim(0,) plt.legend() plt.savefig(\u0026#39;char_count_by_person.png\u0026#39;) 以上でグラフを作成することができました。一度作ってしまえば実行するだけなので、定期的に実行して変化を試したいと思います。\nReference 以下のページを参考にしました https://qiita.com/shimajiroxyz/items/9a06a086ee9730ee3d55\n","permalink":"https://hattomo.github.io/posts/21/q1/0304-python-line/","summary":"はじめに Lineには、トーク履歴をエクスポートする機能が付いています。これをPythonを使って解析し、合計メッセージ数、それぞれのメッセー","title":"PythonでLINEトークの履歴を解析し、グラフを生成する"},{"content":"はじめに 経営についてのメモです。\n経営工学 企業と経営 企業とは  一定の計画に基づき、経済的に活動を続ける経済単位。 利益を出すことに限らない 私企業と公企業がある 利益を出資者に分配する営利企業としない非営利法人がある  貸借対象表 貸借対象法とは、資産と負債+純資産を表にまとめたものである。資産=負債+純資産となる。\n資産には、流動資産と固定資産がある。流動資産とは、1年以内に現金化できるもので現金預金、受け取り手形、有価証券、売掛金などがある。固定資産とは、逆に1年以内に現金化できないもので、土地や建物、機械などがある。\n負債も、流動負債と固定負債に分けられる。同じように流動、固定は時間の長さで分けられており、固定負債は長期借入金や社債、流動負債は支払手形や売掛金のことである。負債は他己資本である。\n純資産とは、資本金と利益余剰金の合計である。純資産は自己資本となる。また、資本に対する、自己資本の比率を自己資本比率と呼ぶ。\n語句  複式帳簿 → 売り上げと売掛金を別に記入し、管理する方法。一方で普通の家計簿のような方法のことを単式帳簿という。 売掛金/買掛金 → 売ったが代金を受け取っていない、買ったが支払っていないお金のこと。 キャッシュフロー → 現金、預金の出入りのこと。キャッシュがマイナスになると資金ショートが発生する。この状態になると企業は倒産してしまう。このため、赤字でも、キャッシュがあれば倒産しないし、黒字でもキャッシュがなくなれば倒産してしまう。資金ショートを防ぐには流動資産が多いと有利である。 運転資金 → 運転資金=売上債権+卸売り資産(在庫)-仕入債務であらわされる。運転資金は、多ければよいというものではない(もちろん少ないのは問題である)。なぜなら、運転資金を負債で調達していれば、資金調達コストが上がってしまうし、自己資本であっても、資金が動かず、機会損失につながってしまうからである。 ROE → Return of Equity 日本語では、自己資本利益率。企業の自己資本に対する当期純利益の割合のことである。 損益分岐点 → 売上高とコストが等しくなるポイント スケールメリット → 商品1単価当たりの固定費が低下するため生産量、販売量が増加することによって、商品1単価当たりの費用が減少すること。 経験曲線効果 → 累積生産量が増加するにしたがって単位コストが減少するという法則を表したもの。これによって次のような戦略が成立する。   市場生成の初期に攻撃的初期投資を行う 累積生産量の蓄積が早く進む商品に焦点を当てる まずは利益よりシェアを優先する 結果としてとびぬけたシェア格差を優先する   ステークスホルダー → 利害関係者(従業員、お客様、原材料を供給する会社、メディア、自治体、株主、競業企業、保険会社\u0026hellip;)  原価計算 原価とは、材料費、労務費、経費に分けられる。\n 材料費とは、素材・原材料費、買入部品費(外部企業から仕入れて使用するもの)、燃料費、工場消耗品費(工程で利用される補助的な部品)、消耗工具器具備品(耐用年数1年以下、10万円未満のもの)..etcのことである。 労務費とは、賃金(工場に働く人の給与)、給与(事務で働く人の給与)、雑給(パートの給与)、賞与手当(ボーナス)、退職給与引当金の繰入(退職金として毎月積み立てられる費用)\u0026hellip;etcのことである。 経費とは、測定経費(メーターなどがあり測定できる経費(電気))、支払経費(何の経費か直接把握できる経費)、月別経費(年契約の月割)、発生経費(未払い費用)のことである。  営利企業の機能  自らを維持する(ゴーイングコンサーン) 利潤を追求する 社会に貢献する  損益計算書 ある一定期間の財務状態をまとめたもの。\n営業損益 売上高 → 会社の本業で稼いだ収益 売上原価 → 売上高を出すためにかかった費用 売上総利益(粗利、粗利益) → 売上高から、売上原価を引いたもの 営業利益 → 売上総利益-販売費及び一般管理費(営業活動をするうえでかかった費用)\n営業外損益 営業外収益 → 不動産や利息など本業以外の利益 営業外費用 → 本業以外で使った費用。借入金の利息など。\n特別損益 特別利益 → 本業以外の臨時収入(株の売却など) 特別損失 → 本業以外の臨時損失(災害など)\nその他 税引前当期純利益 → 経常利益 + 特別利益 - 特別損失\n当期純利益 → 税引前当期利益 - 法人税等各種税金\n企業システム 社員 経営学上では、社員とは従業員のことではなく、株主のことである。有限責任社員とは、一定額までしか責任を負わない社員であり、無限責任社員とは、無限に責任を負う社員である。\n 株式会社 → 有限社員のみ 合資会社 → 無限社員と有限社員 合名会社 → 無限社員のみ 合同会社 → 有限社員のみ 有限会社 → 有限社員のみ(株式会社の規模の小さいもの)  会社の機関  株主総会 → 会社の最高意思決定機関 取締役会 → 代表権を持つ機関 監査役会 → 取締役会の活動を監視する機関  経営目的 経営目的は、企業理念と経営目標からなる。\n経営戦略 経営戦略とは企業の取り巻く環境とのかかわりについて、企業を成功に導くために何をどのように行うかを示したもので、企業に関与する人たちの指針を示したもの。\n戦略的な考え方  短期よりも中長期的 後手でなく先手 指名、目的、目標を、持つ 成長を目指す メリハリをつける 資源(人、物、金、情報)の希少性を意識している 機会費用の概念を理解している 結果に対して責任を負う  ビジョン 自身のなりたい姿であり、経営理念をもとに自社の目指す姿を社員や会社、社会に示したもの。\n経営計画 経営戦略の中で打ち出した課題解決のために、それぞれの施策ごとに目標スケジュールを具体化したもの。財務計画、生産能力計画、施設増強計画、人員計画、資本調達計画\u0026hellip;etc\n事業ドメイン 限られた経営資源を有効に分配しながら競争に打ち勝つために事業活動を行う必要がある。\n 競争する範囲を決めること 適切な大きさであること 事業ドメインは1つとは限らない 他社にはない強みを生かすこと(コア・コンピタンス)  多角化戦略 既存ビジネスを安定させ、企業の持続的成長を実現される戦略であるが、進みすぎると収益性が低下することがある。\nPPM(Product Portfolio Management) 成長率と市場占有率から、事業の状態を分けたもの\n 成長率↑　占有率↑　花形(積極的な投資が求められる) 成長率↓　占有率↓　負け犬(撤退も考えるべき) 成長率↓　占有率↑　金の成る木(最も収益性の高い時期) 成長率↑　占有率↓　問題児  事業戦略 経営戦略からブレークダウンされた各事業の戦略。その戦略を実施する人が具体的に何をすればいいのかがわかる程度まで展開される。\n業界の立ち位置ごとにおける戦略  コストリーダーシップ戦略(最大手がとるべき)\n販売量が多いため、他社より安く生産・販売できる。   規模の優位性 経験曲線効果 独自技術 他社より優位な原材料調達 オペレーションコスト削減  差別化戦略(チャレンジャー)   際立った製品、サービスを開発する  集中化戦略(ニッチャー)   特殊な製品に限る 市場を限定する  価値連鎖(バリューチェーン)  企業活動を個別の価値活動に分解する どの活動がどれだけの価値とコストを生み出しているのかを考える それぞれの優位性を考える   強みを持つ部分に経営資源を集中させる 弱い部分で連携、協力を構築すべきか 無形資産は模倣されにくく、競争優位につながりやすい 研究開発は、経営戦略の中で重要  5つの力分析  売り手の交渉力 買い手の交渉力 代替品の脅威 新規参入の脅威 ex.フィルム→デジカメ→スマホ 業界内の競争の激しさ  ","permalink":"https://hattomo.github.io/posts/21/q1/0227-management-1/","summary":"はじめに 経営についてのメモです。 経営工学 企業と経営 企業とは 一定の計画に基づき、経済的に活動を続ける経済単位。 利益を出すことに限らない 私企業と","title":"経営工学についてのメモ1"},{"content":"はじめに WindowsでもmacOS風のキーバインドを利用したいことがあると思います。そのための設定です。レジストリとAutoHotKeyを利用します。\n※レジストリをおかしくいじると最悪Windowsが起動しなくなります。自己責任でお願いします。\nレジストリでキーをリマップする レジストリでキーをリマップするためには、Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard LayoutにScancode Mapという名称で設定を追加します。空白の場所で右クリックし、New→Binary valueを選択、設定名をScancode Mapとしてください。\n次に、設定を書き込みます。 今回設定するのは以下の項目です。\nBefore →　After ------------------ Capslock → F13 LAlt → LCtrl LWin → LAlt LCtrl → LWin RAlt → RCtrl RCtrl → RAlt これをレジストリで設定するためには以下のようにします。\n00000000 00 00 00 00 00 00 00 00 00000008 07 00 00 00 64 00 3A 00 00000010 1D 00 38 00 5B E0 1D 00 00000018 38 00 5B E0 1D E0 38 E0 00000020 38 E0 1D E0 00 00 00 00 00000028 この設定がどのような構造になっているについてはたくさんのブログがあるのでそちらを見てください。\n再起動した際、設定が反映されていれば成功です。\nAutoHotKey を設定する mac風キーバインドの設定 AutoHotKeyをインストールし、xxx.ahkファイルを作成します。\n私のAutoHotKeyのバージョンは1.1.33.02です。\nahkファイルに設定を記述します。\n;; Eamcs 風のキーバインド F13 \u0026amp; B::Send,{Blind}{Left} F13 \u0026amp; N::Send,{Blind}{Down} F13 \u0026amp; P::Send,{Blind}{Up} F13 \u0026amp; F::Send,{Blind}{Right} F13 \u0026amp; H::Send,{Blind}{Backspace} F13 \u0026amp; D::Send,{Blind}{Delete} F13 \u0026amp; A::Send,{Blind}{Home} F13 \u0026amp; E::Send,{Blind}{End} F13 \u0026amp; K::Send,+{End}{Shift}+{Delete} F13 \u0026amp; Enter::Send,{Alt Down}{Shift Down}{Enter}{Alt Up}{Shift Up} ;;バーチャルディスクトップ F13 \u0026amp; Right::Send, {LCtrl up}{LWin down}{LCtrl down}{Right}{LWin up}{LCtrl up} F13 \u0026amp; Left::Send, {LCtrl up}{LWin down}{LCtrl down}{Left}{LWin up}{LCtrl up} F13 \u0026amp; Up::Send, {LWin down}{Tab}{LWin up} F13 \u0026amp; Down::Send, {LWin down}{Tab}{LWin up} ;; アプリの終了 LCtrl \u0026amp; Q::Send, {LAlt down}{F4}{LAlt up} ;;chromeなどのタブの移動 → LAlt \u0026amp; Right::\tIf GetKeyState(\u0026#34;LCtrl\u0026#34;, \u0026#34;P\u0026#34;) {\tSend,^{Tab} } Return ;;chromeなどのタブの移動 ← LAlt \u0026amp; Left::\tIf GetKeyState(\u0026#34;LCtrl\u0026#34;, \u0026#34;P\u0026#34;) {\tSend,+^{Tab} } Return ;; アプリ(ウインドウ)の切り替え LCtrl \u0026amp; Tab::AltTab ;; 無変換で英語入力 vk1C:: imeoff: Gosub, IMEGetstate If (vimestate=0) { Send, {vkf3} } return ;; 変換で日本語入力 vk1D:: imeon: Gosub, IMEGetstate If (vimestate=1) { Send, {vkf3} } return ;; 上の二つのために必要 IMEGetstate: WinGet, vcurrentwindow, ID, A vimestate := DllCall(\u0026#34;user32.dll\\SendMessageA\u0026#34;, \u0026#34;UInt\u0026#34;, DllCall(\u0026#34;imm32.dll\\ImmGetDefaultIMEWnd\u0026#34;, \u0026#34;Uint\u0026#34;, vcurrentwindow), \u0026#34;UInt\u0026#34;, 0x0283, \u0026#34;Int\u0026#34;, 0x0005, \u0026#34;Int\u0026#34;, 0) return ;; メディアコントロール(macのファンクションキー) ;; Insertと数字の同時押しで再現 ;; 数字でなくファンクションにしてもよいのでは？ ;; brightness up ;;Insert \u0026amp; 1 ;;Insert \u0026amp; 2 ;; task view Insert \u0026amp; 3::Send {LWin down}{Tab}{LWin up} ;; lanch pad ;;Insert \u0026amp; 4 ;; keyboard brightness up ;;Insert \u0026amp; 5,6 ;; play Back Insert \u0026amp; 7::Send {Media_Prev} ;; pause \u0026amp; play Insert \u0026amp; 8::Send {Media_Play_Pause} ;; play next Insert \u0026amp; 9::Send {Media_Next} ;; volume mute Insert \u0026amp; 0::Send {Volume_Mute} ;; volume Down Insert \u0026amp; -::Send {Volume_Down} ;; volume up (if en chang e to =) Insert \u0026amp; ^::Send {Volume_Up} その他便利な設定 どこかのサイトで見つけました。(忘れてしまいました)\n;;クリップボード内容をgoogle search LAlt \u0026amp; s:: If GetKeyState(\u0026#34;Ctrl\u0026#34;, \u0026#34;P\u0026#34;) { send, ^c Clipboard := RegExReplace(Clipboard, \u0026#34;^ +|\\r\\n| +$\u0026#34;, \u0026#34;\u0026#34;) Run, http://www.google.co.jp/search?q=%Clipboard% } Return ;;クリップボード内容をgoogle translate LAlt \u0026amp; t:: If GetKeyState(\u0026#34;Ctrl\u0026#34;, \u0026#34;P\u0026#34;) { send, ^c Clipboard := RegExReplace(Clipboard, \u0026#34;^ +|\\r\\n| +$\u0026#34;, \u0026#34;\u0026#34;) Run, https://translate.google.com/#view=home\u0026amp;op=translate\u0026amp;sl=en\u0026amp;tl=ja\u0026amp;text=%Clipboard% } Return ","permalink":"https://hattomo.github.io/posts/21/q1/0223-autohotkey-mac/","summary":"はじめに WindowsでもmacOS風のキーバインドを利用したいことがあると思います。そのための設定です。レジストリとAutoHotKeyを","title":"Auto HotkeyでMac風キーバインド！"},{"content":"はじめに macOS上では、emacsのキーバインドが一部利用できて便利です。このキーバインドは大抵のテキストエデットアプリには、対応しているのですが、MicrosoftのOffice系アプリでは、これを使うことができません。うっかり慣れで、Ctrl+Hなどを押してしまうと、他の機能が動いてしまいます。\nOfficeでEmacs macOSで、キーバインドのカスタマイズを行おうと思った際にkarabiner-elementsというアプリが有名です。これを使ってOfficeでemacsを利用できるようにしていきます。\n設定は、~/.config/karabiner/assets/complex_modifications/xxxxxx.json(xは数字)にファイルを作成し、以下のように記述します。尚この設定は、Ctrl+H,B,N,P,E,A,Dをサポートしていますが必要に応じて書き換えてください。\n{ \u0026#34;title\u0026#34;: \u0026#34;MS-Office de Emacs key\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;MS-Office de Emacs key\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_arrow\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;f\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;right_arrow\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;p\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;up_arrow\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;n\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;down_arrow\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;home\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;e\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;end\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;h\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_or_backspace\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;d\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_forward\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] } ] } ] } ","permalink":"https://hattomo.github.io/posts/21/q1/0215-karabiner-office/","summary":"はじめに macOS上では、emacsのキーバインドが一部利用できて便利です。このキーバインドは大抵のテキストエデットアプリには、対応している","title":"macOSのOfficeでEmacsキーバインド"},{"content":"はじめに Hugoをつかって、このページを作成していますが、読了時間の表示が常に1 minと表示されていました。おかしいと思っていましたが、さらにrss用のindex.xmlをたまたま見たところ、descriptionタグに記事のほぼすべての文章が入っており、これは日本語が文字数としてカウントされていないためのようでした。\n対処法 config.ymlファイルに\nHasCJKLanguage:trueを追記します。日本語、中国語、韓国語の文字がある場合、これを書いていないと文字カウントがおかしくなってしまうようです。これを追記したところ、正しく動作するようになりました。\n","permalink":"https://hattomo.github.io/posts/21/q1/0214-hugo-reading-time/","summary":"はじめに Hugoをつかって、このページを作成していますが、読了時間の表示が常に1 minと表示されていました。おかしいと思っていましたが、さら","title":"Hugoで読了時間や文字数表示がおかしい"},{"content":"はじめに 少し前に、ひさしぶりにflutterのイベントFlutter Engageが開かれることが発表されました。コロナウイルスの影響で2020年は、flutterのイベントだけでなく、GoogleIOもなくなってしまい残念でした。\nFlutterの機能管理 Flutterのそれぞれのチャンネルで利用可能なプラットフォームはここで管理されています。Flutterはオープンソースなのでこの場所を見ることでイベントでの発表を予測することができます。\nたとえば、macOSの部分を見ると\n/// The [Feature] for macOS desktop. const Feature flutterMacOSDesktopFeature = Feature( name: \u0026#39;beta-quality support for desktop on macOS\u0026#39;, configSetting: \u0026#39;enable-macos-desktop\u0026#39;, environmentOverride: \u0026#39;FLUTTER_MACOS\u0026#39;, extraHelpText: flutterNext ? \u0026#39;Newer beta versions are available on the beta channel.\u0026#39; : null, master: FeatureChannelSetting( available: true, enabledByDefault: false, ), dev: FeatureChannelSetting( available: true, enabledByDefault: false, ), beta: FeatureChannelSetting( available: flutterNext, enabledByDefault: false, ), stable: FeatureChannelSetting( available: flutterNext, enabledByDefault: false, ), ); このようになっています。availableの部分にflutterNextと書かれていますが、ファイルの最後の行に\nconst bool flutterNext = true; このように定義されています。この変更は最近なされたものであり、次のイベントでβ版に昇格するということだと考えられます。同じように変更はWindowsとLinux向けにもなされています。Web版はstableリリースとなるようです。\nこのほかにも、The fast hot reload feature(singleWidgetReload)やThe CFE experimental invalidation strategy(なんだろう?)などが開発されているようです。(2021/02/14 現在)\n気になるのは残るfuchsiaです。Androidを置き換えるのではないかといううわさが出ていますが\u0026hellip;。Flutterでは、masterのみで利用できるように設定されています。\n","permalink":"https://hattomo.github.io/posts/21/q1/0214-flutter-chaneel/","summary":"はじめに 少し前に、ひさしぶりにflutterのイベントFlutter Engageが開かれることが発表されました。コロナウイルスの影響で202","title":"Flutterが使える機能の管理"},{"content":"はじめに WindowsをLinuxやmacOS(bootcampでない)とデュアルブートしていると、OSの時計表示がおかしくなってしまうことがあります。\nどうしておかしくなるのか Windowsは内部でローカルの時間を利用しています。日本であればUTC+09:00です。電源を切るとき、BIOSにこの値を保存します。これをハードウェアクロック、RTC、CMOSクロックと呼びます。BIOSは搭載された電池によって、この値を保持・更新し、次回Windowsが起動する際にWindowsに渡します。しかし、LinuxやmacOSでは、UTCそのものでハードウェアクロックを管理し、表示する際にはタイムゾーンに合わせた値を計算します。このため、例えば、WindowsがUTC+09:00としてシャットダウン時に保存した値をLinuxはUTCと解釈してしまうのです。逆もまた然りです。このため、どちらかの方法に統一する必要があります。今回はWindowsのハードウェアクロックをUTCにあわせます。\nWindowsをUTCに コマンドプロンプトを開いて以下のコマンドを実行します。このコマンドはレジストリを変更し、WindowsのハードウェアクロックをUTCに合わせます。コマンドを実行する際管理者権限が必要です。\n# set UTC reg add \u0026#34;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation\u0026#34; /v RealTimeIsUniversal /d 1 /t REG_DWORD /f 戻す際は、下のコマンドを実行してください。\n# unset reg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation /v RealTimeIsUniversal /f このあと時刻表示がおかしくなっているOSをNTPサーバーと同期して正しい時刻に修正すれば、完了です。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-mangae-hardware-clock-windows-utc/","summary":"はじめに WindowsをLinuxやmacOS(bootcampでない)とデュアルブートしていると、OSの時計表示がおかしくなってしまうこと","title":"WindowsのハードウェアクロックをUTCで管理する"},{"content":"はじめに Hugoで新しいポストを作成するコマンドは、\nhugo new [path to new file] ですが、私はフォルダを分けているので\nhugo new posts/21/Q1/0213-[title] のような長いパスになっていました。いちいち入力するのはめんどくさいし、よく間違えるのでシェルスクリプトを作りました。\n# usage ./new.sh title 作り方 中身は以下のようになっています。\ntitle=$1 year=`date \u0026#39;+%y\u0026#39;` quoter=`date \u0026#39;+Q%q\u0026#39;` date=`date \u0026#39;+%m%d-\u0026#39;` path=posts/$year/$quoter/$date$title/index.md hugo new $path まず、$1はコマンドライン引数を表しています。ここにタイトルが入ります。\nまた、このようにすると変数varにコマンドの結果を入れることができます。\nvar=`command` dateコマンドを利用して必要な値を取得し、変数に入れ、$pathで結合しています。 あとはコマンドを実行して新しいポストを生成するだけです。 と思いましたが、macOSで動作しません。macOSのdateコマンドには、%qがなくクオータが取得できません。そこで、if-elif-elseを使って書き直しました。\n# useage ./newpost title # $1 := titile title=$1 year=`date \u0026#39;+%y\u0026#39;` month=`date \u0026#39;+%m\u0026#39;` date=`date \u0026#39;+%d-\u0026#39;` #quoter=`date \u0026#39;+Q%q\u0026#39;` # for Linux, not for macOS if [ $month == 01 ] || [ $month == 02 ] || [ $month == 03 ]; then quoter=1 elif [ $month == 04 ] || [ $month == 05 ] || [ $month == 06 ]; then quoter=2 elif [ $month == 07 ] || [ $month == 08 ] || [ $month == 09 ]; then quoter=3 else quoter=4 fi path=posts/$year/Q$quoter/$month$date$title/index.md hugo new $path これで目的を達成できました。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-new-post/","summary":"はじめに Hugoで新しいポストを作成するコマンドは、 hugo new [path to new file] ですが、私はフォルダを分けているので hugo new posts/21/Q1/0213-[title] のような長いパスになっていました。","title":"シェルでHugoのポストを新規作成する"},{"content":"はじめに GitHub Codespacesがβになってからしばらくたちました。βの間は無料のようなので、気軽に試すことができます。今回はGithub CodespacesでHugoを使ってみます。(この記事はGitHubCodespaces上で書いています。)\nHugoで使う GitHub Codespacesの基本的な使い方は省略します。Hugoの場合、いつものようにHugo server -Dとすると、baseURLのページは見れるのですが、そこからページの移動ができません。リンク先がlocalhost:1313/pathになっているためです。そこで、Hugoを起動する際、\nhugo server -D --baseUrl=\u0026#34;https://[your URL]-1313.apps.codespaces.githubusercontent.com/\u0026#34; --appendPort=false のように実行することでリンクを機能させることができます。 一つ目はBaseURLの変更です。しかし、これだけだと1313ポートにアクセスしてしまうため、--appendPort=falseでこれを修正します。これでリンク先が機能します。\n感想 リモートにつないでいるにも関わらず、かなり快適に作業することができます。さらにVSCodeがエクステンションやテーマ、キーバインドも含めて完全に動いているのでリモートに接続していることを忘れてしまいそうです。\nリモートマシンはOS:Ubuntu18.04、CPU:Intel(R) Xeon(R) Platinum 8168 CPU @ 2.70GH、RAM 8GB、Stroge:32GBで動いているようです。Hugoを使うだけなら十分すぎます。最初から入っているため、Hugoのインストールなど煩わしいことも必要ありませんでした。しかし、ページはリロードを自分で行わなければ更新されませんでした。この点は微妙です。何か方法があるのかもしれませんが。\nWebブラウザでコードを書くのは、最近のトレンドになっていますが、GoogleのStdiaとか、Windows10のcloud PCのうわさとか、クラウド上で動かすのは当たり前になっていくのでしょうか。\n一つお願いがあるとすれば、GitHub Codespacesは有料化するまでにセルフホストできるようにしてほしいです。この点はVSCode Onlineから、後退してしまうので。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-how-to-use-hugo-in-github-codespaces/","summary":"はじめに GitHub Codespacesがβになってからしばらくたちました。βの間は無料のようなので、気軽に試すことができます。今回はGithub Co","title":"GitHub CodespacesでHugo"},{"content":"はじめに Hugoでは、記事の最終更新時刻をLastmodを利用して表すことができます。configファイルでenableGitInfo: trueと記入しておくとgitのlogをもとにHugoが自動的にLastmodを設定しくれます。しかし、GitHub ActionsでHugoをビルドしたところ、すべてのLastmodが同じ時間(pushした時刻)になってしまっていました。\n解決法 GitHub Actionsのファイルは以下のようでした。\nname:Build GH-Pageson:push:branches:- mainjobs:deploy:runs-on:macos-lateststeps:- name:Git checkoutuses:actions/checkout@v2with:submodules:recursive # Fetch Hugo themes (true OR recursive)- name:Setup hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;- name:Buildrun:hugo --gc --verbose --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}external_repository:Hattomo/Hattomo.github.iopublish_branch:mainpublish_dir:./public問題は、ソースをダウンロードする際、fetch-depthがデフォルトで1になっていることでした。fetch-depthが1の場合、最新のコードのみを持ってくるようです。そのため、履歴がなくLastmodが同一時刻になっていたのでした。以下のように、fetch-depthに0を設定したところ正しく動くようになりました。\nsteps:- name:Git checkoutuses:actions/checkout@v2with:submodules:recursivefetch-depth:0# Add","permalink":"https://hattomo.github.io/posts/21/q1/0213-github-actions-hugo-lastmod/","summary":"はじめに Hugoでは、記事の最終更新時刻をLastmodを利用して表すことができます。configファイルでenableGitInfo: tr","title":"HugoでLastmodが同一時刻になる"},{"content":"はじめに 様々なサイトに導入されているGoogle Analyticsですが、2020年より新たにGoogle Analytics 4(以下GA4)が、導入されました。しかしHugoでは、標準ではまだ対応していません。(これを書いているときの最新バージョンは0.80です)しかし、HugoではGA4を簡単に利用することができます。\nGA4を導入する GoogleAnalytics にアクセスし、GA4のIDを取得します。その方法はここでは省略します。GA4のIDはG-xxxxxxxxxxのようにGから始まります。UAから始まっている場合は、従来のIDです。\nIDが取得出来たら、Hugoのフォルダtheme/layoutの適当なところに新規HTMLファイルを作成し、以下のように追記します。\n analytics-gtag.html  \u0026lt;!-- Global site tag (gtag.js) - Google Analytics 4--\u0026gt; \u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id={{ .Site.GoogleAnalytics }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;{{ .Site.GoogleAnalytics }}\u0026#39;); \u0026lt;/script\u0026gt; 次に、configファイルに移動し、GoogleAnalyticsのIDを設定します。ymlの場合は、以下のようになります。\nGoogleAnalytics:G-xxxxxxxx最後にこれらの設定を読み込みます。theme/layouts/partials/head.htmlのファイルの一番下のほうにある外部ファイルの読み込みを修正します。google_analytics_asyncは従来のgoogle analyticsなので消します。逆に、先ほど作成したファイルのパスを下のように追記します。\n～省略～ {{- template \u0026#34;_internal/google_analytics_async.html\u0026#34; . }} \u0026lt;!--Delete--\u0026gt; {{- template \u0026#34;{path to file}/analytics-gtag.html\u0026#34; . }} \u0026lt;!--Add GA4--\u0026gt; {{- template \u0026#34;_internal/google_news.html\u0026#34; . }} {{- template \u0026#34;partials/templates/opengraph.html\u0026#34; . }} {{- template \u0026#34;partials/templates/twitter_cards.html\u0026#34; . }} {{- template \u0026#34;partials/templates/schema_json.html\u0026#34; . }} ～省略～ 以上で完了です。\n適当なページを作り、アクセスした状態で、Google Analyticsのリアルタイムを確認して下さい。ユーザーが確認できれば、成功です。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-new-google-analytics-4/","summary":"はじめに 様々なサイトに導入されているGoogle Analyticsですが、2020年より新たにGoogle Analytics 4(以下GA4)が、導入されまし","title":"HugoでGoogle Analytics 4を利用する"},{"content":"はじめに MicrosoftのVSCodeでデフォルトのフォントを確認する方法です。先日、このサイトのほかのページにコードを書いたところ、macOSではきれいに表示されていましたが、Windowsでは汚いフォントで表示されていました。もちろんCSSをいじってFont-Familyを設定すればいいわけですが、どれを設定すればいいかわからない！ってことでVSCodeのデフォルトのフォントと同じフォントを設定すればきれいではないかと思い調べました。\n方法 シンプルにソースコードを見に行くのが早いでしょう(たぶん)。ソースコードは、GitHubのmicrosoft/vscodeで公開されており、そのなかでフォントを指定している部分はここです。27~29行目を見ると、以下のような記述があります。\n.mac { --monaco-monospace-font: \u0026#34;SF Mono\u0026#34;, Monaco, Menlo, Courier, monospace; } .windows { --monaco-monospace-font: Consolas, \u0026#34;Courier New\u0026#34;, monospace; } .linux { --monaco-monospace-font: \u0026#34;Ubuntu Mono\u0026#34;, \u0026#34;Liberation Mono\u0026#34;, \u0026#34;DejaVu Sans Mono\u0026#34;, \u0026#34;Courier New\u0026#34;, monospace; } どうやら、OSによって異なるフォントを使っているようです。macOSではSF Mono、WindowsではConsolas、LinuxではUbuntu Monoのようです。Linuxの最初がUbuntu Monoなので、LinuxでVSCodeを利用する人は、Ubuntuが一番多そうです。このサイトのCSSにも、これらのフォントを指定しておきました。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-vscode-default-font/","summary":"はじめに MicrosoftのVSCodeでデフォルトのフォントを確認する方法です。先日、このサイトのほかのページにコードを書いたところ、ma","title":"VSCodeのデフォルトフォントを確認する方法"},{"content":"Python Environment Python便利なコマンドのメモです。\nvenv # if you do not have venv # linux $ sudo apt install python3-venv # create virtual environment $ python3 -m venv [/path/to/new/virtual/environment] # activate $ cd [environment name] $ source [environment name]/bin/activate # deactivate $ deactivate Module input \u0026amp; output $ pip3 freeze \u0026gt; requirements.txt $ pip3 install -r requirements.txt Install and Run Jupyter Notebook # install $ pip3 install jupyter #Run $ jupyter notebook # or $ python3 -m notebook # After seconds, Press Ctrl+C to show URL OpenCV # install $ pip3 install opencv-python # python # useage import cv2 ","permalink":"https://hattomo.github.io/posts/21/q1/0210-python-commands/","summary":"Python Environment Python便利なコマンドのメモです。 venv # if you do not have venv # linux $ sudo apt install python3-venv # create virtual environment $ python3 -m venv [/path/to/new/virtual/environment] # activate $ cd [environment name] $ source [environment name]/bin/activate # deactivate $ deactivate Module input \u0026amp; output $ pip3 freeze \u0026gt; requirements.txt $ pip3","title":"Useful Python commands"},{"content":"アクセス解析ツールについて 当サイトでは、Googleによるアクセス解析ツール「Googleアナリティクス」を利用しています。\nこのGoogleアナリティクスはトラフィックデータの収集のためにCookieを使用しています。このトラフィックデータは匿名で収集されており、個人を特定するものではありません。この機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。この規約に関して、詳しくはこちらをクリックしてください。\n免責事項 当サイトで掲載している画像の著作権・肖像権等は各権利所有者に帰属致します。権利を侵害する目的ではございません。記事の内容や掲載画像等に問題がございましたら、各権利所有者様本人が直接ご連絡下さい。確認後、対応させて頂きます。\n当サイトからリンクやバナーなどによって他のサイトに移動された場合、移動先サイトで提供される情報、サービス等について一切の責任を負いません。\n当サイトのコンテンツ・情報につきまして、可能な限り正確な情報を掲載するよう努めておりますが、誤情報が入り込んだり、情報が古くなっていることもございます。\n当サイトに掲載された内容によって生じた損害等の一切の責任を負いかねますのでご了承ください。\n","permalink":"https://hattomo.github.io/privacypolicy/","summary":"アクセス解析ツールについて 当サイトでは、Googleによるアクセス解析ツール「Googleアナリティクス」を利用しています。 このGoogle","title":"Privacy Policy"},{"content":"Hugo をインストールする homebrewを利用した方法が、一般的なようでしたが、Install hugoを参考にGitHubからバイナリをダウンロードし、解凍したhugoの実行ファイルを/usr/local/binに配置しました。\nテーマを決める テーマは少し迷いましたが、hugo-PaperModにしました。開発が活発に続けられていたこと、ドキュメントが整備されていたこと、デザインが気に入ったためです。\ngitのサブモジュールに登録します。\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 git submodule update --init --recursive 今後テーマをアップデートするためには、以下のコマンドを実行します。\ngit submodule update --remote --merge 新規記事を作成する 以下のコマンドを実行します。\nhugo new posts/{path to new file}.md Hugo ローカルサーバーを立ち上げる hugo server -D テーマを編集する テーマをフォークし、次のような変更を行いました(行う予定です)。\n 文字サイズの変更 google analytics の追加 klatexのサポート Syntax Highlightingの設定 前回の記事、次の記事へのリンクの追加  GitHubにpushしたらdeployが行われるよう設定する GitHub actionを利用して、自動的にgithub-pagesにdeployが行われるように設定します。 peaceiris/actions-hugo@v2とpeaceiris/actions-gh-pages@v3を利用しました。\nReference  https://gohugo.io/getting-started/quick-start/ https://github.com/adityatelange/hugo-PaperMod  ","permalink":"https://hattomo.github.io/posts/21/q1/0127-how-to-use-hugo/","summary":"Hugo をインストールする homebrewを利用した方法が、一般的なようでしたが、Install hugoを参考にGitHubからバイナリをダウンロ","title":"How to install and use Hugo"},{"content":"Who are you ? I am a student in University. I ❤️ Python, Flutter, VSCode, Machine Learning.\nComputer Skills  Python Flutter(contributor) \u0026amp; Dart C/C++ Java(little)  My Computers Computers which I use.\n  Macbook Pro 13inch 2017\n   Parts Model     OS macOS 11   CPU Intel Corei5 7360U   Memory 8GB 2133 MHz   SSD 256GB      Self build PC (Family sharing)\n   Parts Model     OS macOS 11 / windows10 20H2   CPU Intel Corei5 8400   Memory 16GB 2666 MHz   SSD 1TB / 500GB      Raspberry Pi 3B+\n   Parts Model     OS Raspbian   SoC Broadcom BCM2837B0   Memory 1GB   Micro SD Card 16GB      ","permalink":"https://hattomo.github.io/about/","summary":"Who are you ? I am a student in University. I ❤️ Python, Flutter, VSCode, Machine Learning.\nComputer Skills  Python Flutter(contributor) \u0026amp; Dart C/C++ Java(little)  My Computers Computers which I use.\n  Macbook Pro 13inch 2017\n   Parts Model     OS macOS 11   CPU Intel Corei5 7360U   Memory 8GB 2133 MHz   SSD 256GB      Self build PC (Family sharing)","title":"About"}]