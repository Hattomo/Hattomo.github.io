[{"content":"はじめに WindowsでもmacOS風のキーバインドを利用したいことがあると思います。そのための設定です。レジストリとAutoHotKeyを利用します。\n※レジストリをおかしくいじると最悪Windowsが起動しなくなります。自己責任でお願いします。\nレジストリでキーをリマップする レジストリでキーをリマップするためには、Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard LayoutにScancode Mapという名称で設定を追加します。空白の場所で右クリックし、New→Binary valueを選択、設定名をScancode Mapとしてください。\n次に、設定を書き込みます。 今回設定するのは以下の項目です。\nBefore →　After ------------------ Capslock → F13 LAlt → LCtrl LWin → LAlt LCtrl → LWin RAlt → RCtrl RCtrl → RAlt これをレジストリで設定するためには以下のようにします。\n00000000 00 00 00 00 00 00 00 00 00000008 07 00 00 00 64 00 3A 00 00000010 1D 00 38 00 5B E0 1D 00 00000018 38 00 5B E0 1D E0 38 E0 00000020 38 E0 1D E0 00 00 00 00 00000028 この設定がどのような構造になっているについてはたくさんのブログがあるのでそちらを見てください。\n再起動した際、設定が反映されていれば成功です。\nAutoHotKey を設定する mac風キーバインドの設定 AutoHotKeyをインストールし、xxx.ahkファイルを作成します。\n私のAutoHotKeyのバージョンは1.1.33.02です。\nahkファイルに設定を記述します。\n;; Eamcs 風のキーバインド F13 \u0026amp; B::Send,{Blind}{Left} F13 \u0026amp; N::Send,{Blind}{Down} F13 \u0026amp; P::Send,{Blind}{Up} F13 \u0026amp; F::Send,{Blind}{Right} F13 \u0026amp; H::Send,{Blind}{Backspace} F13 \u0026amp; D::Send,{Blind}{Delete} F13 \u0026amp; A::Send,{Blind}{Home} F13 \u0026amp; E::Send,{Blind}{End} F13 \u0026amp; K::Send,+{End}{Shift}+{Delete} F13 \u0026amp; Enter::Send,{Alt Down}{Shift Down}{Enter}{Alt Up}{Shift Up} ;;バーチャルディスクトップ F13 \u0026amp; Right::Send, {LCtrl up}{LWin down}{LCtrl down}{Right}{LWin up}{LCtrl up} F13 \u0026amp; Left::Send, {LCtrl up}{LWin down}{LCtrl down}{Left}{LWin up}{LCtrl up} F13 \u0026amp; Up::Send, {LWin down}{Tab}{LWin up} F13 \u0026amp; Down::Send, {LWin down}{Tab}{LWin up} ;; アプリの終了 LCtrl \u0026amp; Q::Send, {LAlt down}{F4}{LAlt up} ;;chromeなどのタブの移動 → LAlt \u0026amp; Right::\tIf GetKeyState(\u0026#34;LCtrl\u0026#34;, \u0026#34;P\u0026#34;) {\tSend,^{Tab} } Return ;;chromeなどのタブの移動 ← LAlt \u0026amp; Left::\tIf GetKeyState(\u0026#34;LCtrl\u0026#34;, \u0026#34;P\u0026#34;) {\tSend,+^{Tab} } Return ;; アプリ(ウインドウ)の切り替え LCtrl \u0026amp; Tab::AltTab ;; 無変換で英語入力 vk1C:: imeoff: Gosub, IMEGetstate If (vimestate=0) { Send, {vkf3} } return ;; 変換で日本語入力 vk1D:: imeon: Gosub, IMEGetstate If (vimestate=1) { Send, {vkf3} } return ;; 上の二つのために必要 IMEGetstate: WinGet, vcurrentwindow, ID, A vimestate := DllCall(\u0026#34;user32.dll\\SendMessageA\u0026#34;, \u0026#34;UInt\u0026#34;, DllCall(\u0026#34;imm32.dll\\ImmGetDefaultIMEWnd\u0026#34;, \u0026#34;Uint\u0026#34;, vcurrentwindow), \u0026#34;UInt\u0026#34;, 0x0283, \u0026#34;Int\u0026#34;, 0x0005, \u0026#34;Int\u0026#34;, 0) return ;; メディアコントロール(macのファンクションキー) ;; Insertと数字の同時押しで再現 ;; 数字でなくファンクションにしてもよいのでは？ ;; brightness up ;;Insert \u0026amp; 1 ;;Insert \u0026amp; 2 ;; task view Insert \u0026amp; 3::Send {LWin down}{Tab}{LWin up} ;; lanch pad ;;Insert \u0026amp; 4 ;; keyboard brightness up ;;Insert \u0026amp; 5,6 ;; play Back Insert \u0026amp; 7::Send {Media_Prev} ;; pause \u0026amp; play Insert \u0026amp; 8::Send {Media_Play_Pause} ;; play next Insert \u0026amp; 9::Send {Media_Next} ;; volume mute Insert \u0026amp; 0::Send {Volume_Mute} ;; volume Down Insert \u0026amp; -::Send {Volume_Down} ;; volume up (if en chang e to =) Insert \u0026amp; ^::Send {Volume_Up} その他便利な設定 どこかのサイトで見つけました。(忘れてしまいました)\n;;クリップボード内容をgoogle search LAlt \u0026amp; s:: If GetKeyState(\u0026#34;Ctrl\u0026#34;, \u0026#34;P\u0026#34;) { send, ^c Clipboard := RegExReplace(Clipboard, \u0026#34;^ +|\\r\\n| +$\u0026#34;, \u0026#34;\u0026#34;) Run, http://www.google.co.jp/search?q=%Clipboard% } Return ;;クリップボード内容をgoogle translate LAlt \u0026amp; t:: If GetKeyState(\u0026#34;Ctrl\u0026#34;, \u0026#34;P\u0026#34;) { send, ^c Clipboard := RegExReplace(Clipboard, \u0026#34;^ +|\\r\\n| +$\u0026#34;, \u0026#34;\u0026#34;) Run, https://translate.google.com/#view=home\u0026amp;op=translate\u0026amp;sl=en\u0026amp;tl=ja\u0026amp;text=%Clipboard% } Return ","permalink":"https://hattomo.github.io/posts/21/q1/0223-autohotkey-mac/","summary":"はじめに WindowsでもmacOS風のキーバインドを利用したいことがあると思います。そのための設定です。レジストリとAutoHotKeyを","title":"Auto HotkeyでMac風キーバインド！"},{"content":"はじめに macOS上では、emacsのキーバインドが一部利用できて便利です。このキーバインドは大抵のテキストエデットアプリには、対応しているのですが、MicrosoftのOffice系アプリでは、これを使うことができません。うっかり慣れで、Ctrl+Hなどを押してしまうと、他の機能が動いてしまいます。\nOfficeでEmacs macOSで、キーバインドのカスタマイズを行おうと思った際にkarabiner-elementsというアプリが有名です。これを使ってOfficeでemacsを利用できるようにしていきます。\n設定は、~/.config/karabiner/assets/complex_modifications/xxxxxx.json(xは数字)にファイルを作成し、以下のように記述します。尚この設定は、Ctrl+H,B,N,P,E,A,Dをサポートしていますが必要に応じて書き換えてください。\n{ \u0026#34;title\u0026#34;: \u0026#34;MS-Office de Emacs key\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;MS-Office de Emacs key\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;b\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_arrow\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;f\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;right_arrow\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;p\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;up_arrow\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;n\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;down_arrow\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;home\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;e\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;end\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;h\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_or_backspace\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] }, { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;d\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;delete_forward\u0026#34; } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.Word$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Excel$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.Powerpoint$\u0026#34; ] } ] } ] } ] } ","permalink":"https://hattomo.github.io/posts/21/q1/0215-karabiner-office/","summary":"はじめに macOS上では、emacsのキーバインドが一部利用できて便利です。このキーバインドは大抵のテキストエデットアプリには、対応している","title":"macOSのOfficeでEmacsキーバインド"},{"content":"はじめに Hugoをつかって、このページを作成していますが、読了時間の表示が常に1 minと表示されていました。おかしいと思っていましたが、さらにrss用のindex.xmlをたまたま見たところ、descriptionタグに記事のほぼすべての文章が入っており、これは日本語が文字数としてカウントされていないためのようでした。\n対処法 config.ymlファイルに\nHasCJKLanguage:trueを追記します。日本語、中国語、韓国語の文字がある場合、これを書いていないと文字カウントがおかしくなってしまうようです。これを追記したところ、正しく動作するようになりました。\n","permalink":"https://hattomo.github.io/posts/21/q1/0214-readingtime/","summary":"はじめに Hugoをつかって、このページを作成していますが、読了時間の表示が常に1 minと表示されていました。おかしいと思っていましたが、さら","title":"Hugoで読了時間や文字数表示がおかしい"},{"content":"はじめに 少し前に、ひさしぶりにflutterのイベントFlutter Engageが開かれることが発表されました。コロナウイルスの影響で2020年は、flutterのイベントだけでなく、GoogleIOもなくなってしまい残念でした。\nFlutterの機能管理 Flutterのそれぞれのチャンネルで利用可能なプラットフォームはここで管理されています。Flutterはオープンソースなのでこの場所を見ることでイベントでの発表を予測することができます。\nたとえば、macOSの部分を見ると\n/// The [Feature] for macOS desktop. const Feature flutterMacOSDesktopFeature = Feature( name: \u0026#39;beta-quality support for desktop on macOS\u0026#39;, configSetting: \u0026#39;enable-macos-desktop\u0026#39;, environmentOverride: \u0026#39;FLUTTER_MACOS\u0026#39;, extraHelpText: flutterNext ? \u0026#39;Newer beta versions are available on the beta channel.\u0026#39; : null, master: FeatureChannelSetting( available: true, enabledByDefault: false, ), dev: FeatureChannelSetting( available: true, enabledByDefault: false, ), beta: FeatureChannelSetting( available: flutterNext, enabledByDefault: false, ), stable: FeatureChannelSetting( available: flutterNext, enabledByDefault: false, ), ); このようになっています。availableの部分にflutterNextと書かれていますが、ファイルの最後の行に\nconst bool flutterNext = true; このように定義されています。この変更は最近なされたものであり、次のイベントでβ版に昇格するということだと考えられます。同じように変更はWindowsとLinux向けにもなされています。Web版はstableリリースとなるようです。\nこのほかにも、The fast hot reload feature(singleWidgetReload)やThe CFE experimental invalidation strategy(なんだろう?)などが開発されているようです。(2021/02/14 現在)\n気になるのは残るfuchsiaです。Androidを置き換えるのではないかといううわさが出ていますが\u0026hellip;。Flutterでは、masterのみで利用できるように設定されています。\n","permalink":"https://hattomo.github.io/posts/21/q1/0214-flutter-chaneel/","summary":"はじめに 少し前に、ひさしぶりにflutterのイベントFlutter Engageが開かれることが発表されました。コロナウイルスの影響で202","title":"Flutterが使える機能の管理"},{"content":"はじめに WindowsをLinuxやmacOS(bootcampでない)とデュアルブートしていると、OSの時計表示がおかしくなってしまうことがあります。\nどうしておかしくなるのか Windowsは内部でローカルの時間を利用しています。日本であればUTC+09:00です。電源を切るとき、BIOSにこの値を保存します。BIOSは搭載された電池によって、この値を保持・更新し、次回Windowsが起動する際にWindowsに渡します。しかし、LinuxやmacOSでは、UTCそのもので時間を管理し、表示する際にはタイムゾーンに合わせた値を計算します。このため、例えば、WindowsがUTC+09:00としてシャットダウン時に保存した値をLinuxはUTCと解釈してしまうのです。逆もまた然りです。このため、どちらかの方法に統一する必要があります。今回はWindowsの時間管理をUTCにあわせます。\nWindowsをUTCに コマンドプロンプトを開いて以下のコマンドを実行します。\n# set UTC reg add \u0026#34;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation\u0026#34; /v RealTimeIsUniversal /d 1 /t REG_DWORD /f 戻す際は、下のコマンドを実行してください。\n# unset reg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation /v RealTimeIsUniversal /f このあと時刻表示がおかしくなっているOSをNTPサーバーと同期して正しい時刻に修正すれば、完了です。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-windowsutc/","summary":"はじめに WindowsをLinuxやmacOS(bootcampでない)とデュアルブートしていると、OSの時計表示がおかしくなってしまうこと","title":"Windowsの時間をUTCで管理する"},{"content":"はじめに Hugoで新しいポストを作成するコマンドは、\nhugo new [path to new file] ですが、私はフォルダを分けているので\nhugo new posts/21/Q1/0213-[title] のような長いパスになっていました。いちいち入力するのはめんどくさいし、よく間違えるのでシェルスクリプトを作りました。\n# usage ./new.sh title 作り方 中身は以下のようになっています。\ntitle=$1 year=`date \u0026#39;+%y\u0026#39;` quoter=`date \u0026#39;+Q%q\u0026#39;` date=`date \u0026#39;+%m%d-\u0026#39;` path=posts/$year/$quoter/$date$title/index.md hugo new $path まず、$1はコマンドライン引数を表しています。ここにタイトルが入ります。\nまた、このようにすると変数varにコマンドの結果を入れることができます。\nvar=`command` dateコマンドを利用して必要な値を取得し、変数に入れ、$pathで結合しています。 あとはコマンドを実行して新しいポストを生成するだけです。 と思いましたが、macOSで動作しません。macOSのdateコマンドには、%qがなくクオータが取得できません。そこで、if-elif-elseを使って書き直しました。\n# useage ./newpost title # $1 := titile title=$1 year=`date \u0026#39;+%y\u0026#39;` month=`date \u0026#39;+%m\u0026#39;` date=`date \u0026#39;+%d-\u0026#39;` #quoter=`date \u0026#39;+Q%q\u0026#39;` # for Linux, not for macOS if [ $month == 01 ] || [ $month == 02 ] || [ $month == 03 ]; then quoter=1 elif [ $month == 04 ] || [ $month == 05 ] || [ $month == 06 ]; then quoter=2 elif [ $month == 07 ] || [ $month == 08 ] || [ $month == 09 ]; then quoter=3 else quoter=4 fi path=posts/$year/Q$quoter/$month$date$title/index.md hugo new $path これで目的を達成できました。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-newpost/","summary":"はじめに Hugoで新しいポストを作成するコマンドは、 hugo new [path to new file] ですが、私はフォルダを分けているので hugo new posts/21/Q1/0213-[title] のような長いパスになっていました。","title":"シェルでHugoのポストを新規作成する"},{"content":"はじめに GitHub Codespacesがβになってからしばらくたちました。βの間は無料のようなので、気軽に試すことができます。今回はGithub CodespacesでHugoを使ってみます。(この記事はGitHubCodespaces上で書いています。)\nHugoで使う GitHub Codespacesの基本的な使い方は省略します。Hugoの場合、いつものようにHugo server -Dとすると、baseURLのページは見れるのですが、そこからページの移動ができません。リンク先がlocalhost:1313/pathになっているためです。そこで、Hugoを起動する際、\nhugo server -D --baseUrl=\u0026#34;https://[your URL]-1313.apps.codespaces.githubusercontent.com/\u0026#34; --appendPort=false のように実行することでリンクを機能させることができます。 一つ目はBaseURLの変更です。しかし、これだけだと1313ポートにアクセスしてしまうため、--appendPort=falseでこれを修正します。これでリンク先が機能します。\n感想 リモートにつないでいるにも関わらず、かなり快適に作業することができます。さらにVSCodeがエクステンションやテーマ、キーバインドも含めて完全に動いているのでリモートに接続していることを忘れてしまいそうです。\nリモートマシンはOS:Ubuntu18.04、CPU:Intel(R) Xeon(R) Platinum 8168 CPU @ 2.70GH、RAM 8GB、Stroge:32GBで動いているようです。Hugoを使うだけなら十分すぎます。最初から入っているため、Hugoのインストールなど煩わしいことも必要ありませんでした。しかし、ページはリロードを自分で行わなければ更新されませんでした。この点は微妙です。何か方法があるのかもしれませんが。\nWebブラウザでコードを書くのは、最近のトレンドになっていますが、GoogleのStdiaとか、Windows10のcloud PCのうわさとか、クラウド上で動かすのは当たり前になっていくのでしょうか。\n一つお願いがあるとすれば、GitHub Codespacesは有料化するまでにセルフホストできるようにしてほしいです。この点はVSCode Onlineから、後退してしまうので。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-hugoghcode/","summary":"はじめに GitHub Codespacesがβになってからしばらくたちました。βの間は無料のようなので、気軽に試すことができます。今回はGithub Co","title":"GitHub CodespacesでHugo"},{"content":"はじめに Hugoでは、記事の最終更新時刻をLastmodを利用して表すことができます。configファイルでenableGitInfo: trueと記入しておくとgitのlogをもとにHugoが自動的にLastmodを設定しくれます。しかし、GitHub ActionsでHugoをビルドしたところ、すべてのLastmodが同じ時間(pushした時刻)になってしまっていました。\n解決法 GitHub Actionsのファイルは以下のようでした。\nname:Build GH-Pageson:push:branches:- mainjobs:deploy:runs-on:macos-lateststeps:- name:Git checkoutuses:actions/checkout@v2with:submodules:recursive # Fetch Hugo themes (true OR recursive)- name:Setup hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;- name:Buildrun:hugo --gc --verbose --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}external_repository:Hattomo/Hattomo.github.iopublish_branch:mainpublish_dir:./public問題は、ソースをダウンロードする際、fetch-depthがデフォルトで1になっていることでした。fetch-depthが1の場合、最新のコードのみを持ってくるようです。そのため、履歴がなくLastmodが同一時刻になっていたのでした。以下のように、fetch-depthに0を設定したところ正しく動くようになりました。\nsteps:- name:Git checkoutuses:actions/checkout@v2with:submodules:recursivefetch-depth:0# Add","permalink":"https://hattomo.github.io/posts/21/q1/0213-gahugo/","summary":"はじめに Hugoでは、記事の最終更新時刻をLastmodを利用して表すことができます。configファイルでenableGitInfo: tr","title":"HugoでLastmodが同一時刻になる"},{"content":"はじめに 様々なサイトに導入されているGoogle Analyticsですが、2020年より新たにGoogle Analytics 4(以下GA4)が、導入されました。しかしHugoでは、標準ではまだ対応していません。(これを書いているときの最新バージョンは0.80です)しかし、HugoではGA4を簡単に利用することができます。\nGA4を導入する GoogleAnalytics にアクセスし、GA4のIDを取得します。その方法はここでは省略します。GA4のIDはG-xxxxxxxxxxのようにGから始まります。UAから始まっている場合は、従来のIDです。\nIDが取得出来たら、Hugoのフォルダtheme/layoutの適当なところに新規HTMLファイルを作成し、以下のように追記します。\n analytics-gtag.html  \u0026lt;!-- Global site tag (gtag.js) - Google Analytics 4--\u0026gt; \u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id={{ .Site.GoogleAnalytics }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;{{ .Site.GoogleAnalytics }}\u0026#39;); \u0026lt;/script\u0026gt; 次に、configファイルに移動し、GoogleAnalyticsのIDを設定します。ymlの場合は、以下のようになります。\nGoogleAnalytics:G-xxxxxxxx最後にこれらの設定を読み込みます。theme/layouts/partials/head.htmlのファイルの一番下のほうにある外部ファイルの読み込みを修正します。google_analytics_asyncは従来のgoogle analyticsなので消します。逆に、先ほど作成したファイルのパスを下のように追記します。\n～省略～ {{- template \u0026#34;_internal/google_analytics_async.html\u0026#34; . }} \u0026lt;!--Delete--\u0026gt; {{- template \u0026#34;{path to file}/analytics-gtag.html\u0026#34; . }} \u0026lt;!--Add GA4--\u0026gt; {{- template \u0026#34;_internal/google_news.html\u0026#34; . }} {{- template \u0026#34;partials/templates/opengraph.html\u0026#34; . }} {{- template \u0026#34;partials/templates/twitter_cards.html\u0026#34; . }} {{- template \u0026#34;partials/templates/schema_json.html\u0026#34; . }} ～省略～ 以上で完了です。\n適当なページを作り、アクセスした状態で、Google Analyticsのリアルタイムを確認して下さい。ユーザーが確認できれば、成功です。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-newgoogleanalytics/","summary":"はじめに 様々なサイトに導入されているGoogle Analyticsですが、2020年より新たにGoogle Analytics 4(以下GA4)が、導入されまし","title":"HugoでGoogle Analytics 4を利用する"},{"content":"はじめに MicrosoftのVSCodeでデフォルトのフォントを確認する方法です。先日、このサイトのほかのページにコードを書いたところ、macOSではきれいに表示されていましたが、Windowsでは汚いフォントで表示されていました。もちろんCSSをいじってFont-Familyを設定すればいいわけですが、どれを設定すればいいかわからない！ってことでVSCodeのデフォルトのフォントと同じフォントを設定すればきれいではないかと思い調べました。\n方法 シンプルにソースコードを見に行くのが早いでしょう(たぶん)。ソースコードは、GitHubのmicrosoft/vscodeで公開されており、そのなかでフォントを指定している部分はここです。27~29行目を見ると、以下のような記述があります。\n.mac { --monaco-monospace-font: \u0026#34;SF Mono\u0026#34;, Monaco, Menlo, Courier, monospace; } .windows { --monaco-monospace-font: Consolas, \u0026#34;Courier New\u0026#34;, monospace; } .linux { --monaco-monospace-font: \u0026#34;Ubuntu Mono\u0026#34;, \u0026#34;Liberation Mono\u0026#34;, \u0026#34;DejaVu Sans Mono\u0026#34;, \u0026#34;Courier New\u0026#34;, monospace; } どうやら、OSによって異なるフォントを使っているようです。macOSではSF Mono、WindowsではConsolas、LinuxではUbuntu Monoのようです。Linuxの最初がUbuntu Monoなので、LinuxでVSCodeを利用する人は、Ubuntuが一番多そうです。このサイトのCSSにも、これらのフォントを指定しておきました。\n","permalink":"https://hattomo.github.io/posts/21/q1/0213-vscodedefaultfont/","summary":"はじめに MicrosoftのVSCodeでデフォルトのフォントを確認する方法です。先日、このサイトのほかのページにコードを書いたところ、ma","title":"VSCodeのデフォルトフォントを確認する方法"},{"content":"Python Environment Python便利なコマンドのメモです。\nvenv # if you do not have venv # linux $ sudo apt install python3-venv # create virtual environment $ python3 -m venv [/path/to/new/virtual/environment] # activate $ cd [environment name] $ source [environment name]/bin/activate # deactivate $ deactivate Module input \u0026amp; output $ pip3 freeze \u0026gt; requirements.txt $ pip3 install -r requirements.txt Install and Run Jupyter Notebook # install $ pip3 install jupyter #Run $ jupyter notebook # or $ python3 -m notebook # After seconds, Press Ctrl+C to show URL OpenCV # install $ pip3 install opencv-python # python # useage import cv2 ","permalink":"https://hattomo.github.io/posts/21/q1/0210-python-commands/","summary":"Python Environment Python便利なコマンドのメモです。 venv # if you do not have venv # linux $ sudo apt install python3-venv # create virtual environment $ python3 -m venv [/path/to/new/virtual/environment] # activate $ cd [environment name] $ source [environment name]/bin/activate # deactivate $ deactivate Module input \u0026amp; output $ pip3 freeze \u0026gt; requirements.txt $ pip3","title":"Useful Python commands"},{"content":"アクセス解析ツールについて 当サイトでは、Googleによるアクセス解析ツール「Googleアナリティクス」を利用しています。\nこのGoogleアナリティクスはトラフィックデータの収集のためにCookieを使用しています。このトラフィックデータは匿名で収集されており、個人を特定するものではありません。この機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。この規約に関して、詳しくはこちらをクリックしてください。\n免責事項 当サイトで掲載している画像の著作権・肖像権等は各権利所有者に帰属致します。権利を侵害する目的ではございません。記事の内容や掲載画像等に問題がございましたら、各権利所有者様本人が直接ご連絡下さい。確認後、対応させて頂きます。\n当サイトからリンクやバナーなどによって他のサイトに移動された場合、移動先サイトで提供される情報、サービス等について一切の責任を負いません。\n当サイトのコンテンツ・情報につきまして、可能な限り正確な情報を掲載するよう努めておりますが、誤情報が入り込んだり、情報が古くなっていることもございます。\n当サイトに掲載された内容によって生じた損害等の一切の責任を負いかねますのでご了承ください。\n","permalink":"https://hattomo.github.io/privacypolicy/","summary":"アクセス解析ツールについて 当サイトでは、Googleによるアクセス解析ツール「Googleアナリティクス」を利用しています。 このGoogle","title":"Privacy Policy"},{"content":"Hugo をインストールする homebrewを利用した方法が、一般的なようでしたが、Install hugoを参考にGitHubからバイナリをダウンロードし、解凍したhugoの実行ファイルを/usr/local/binに配置しました。\nテーマを決める テーマは少し迷いましたが、hugo-PaperModにしました。開発が活発に続けられていたこと、ドキュメントが整備されていたこと、デザインが気に入ったためです。\ngitのサブモジュールに登録します。\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 git submodule update --init --recursive 今後テーマをアップデートするためには、以下のコマンドを実行します。\ngit submodule update --remote --merge 新規記事を作成する 以下のコマンドを実行します。\nhugo new posts/{path to new file}.md Hugo ローカルサーバーを立ち上げる hugo server -D テーマを編集する テーマをフォークし、次のような変更を行いました(行う予定です)。\n 文字サイズの変更 google analytics の追加 klatexのサポート Syntax Highlightingの設定 前回の記事、次の記事へのリンクの追加  GitHubにpushしたらdeployが行われるよう設定する GitHub actionを利用して、自動的にgithub-pagesにdeployが行われるように設定します。 peaceiris/actions-hugo@v2とpeaceiris/actions-gh-pages@v3を利用しました。\nReference  https://gohugo.io/getting-started/quick-start/ https://github.com/adityatelange/hugo-PaperMod  ","permalink":"https://hattomo.github.io/posts/21/q1/0127-howtousehugo/","summary":"Hugo をインストールする homebrewを利用した方法が、一般的なようでしたが、Install hugoを参考にGitHubからバイナリをダウンロ","title":"How to install and use Hugo"},{"content":"Who are you ? I am a student in University. I ❤️ Python, Flutter, VSCode, Machine Learning.\nComputer Skills  Python Flutter(contributor) \u0026amp; Dart C/C++ Java(little)  My Computers Computers which I use.\n  Macbook Pro 13inch 2017\n   Parts Model     OS macOS 11   CPU Intel Corei5 7360U   Memory 8GB 2133 MHz   SSD 256GB      Self build PC (Family sharing)\n   Parts Model     OS macOS 11 / windows10 20H2   CPU Intel Corei5 8400   Memory 16GB 2666 MHz   SSD 1TB / 500GB      Raspberry Pi 3B+\n   Parts Model     OS Raspbian   SoC Broadcom BCM2837B0   Memory 1GB   Micro SD Card 16GB      ","permalink":"https://hattomo.github.io/about/","summary":"Who are you ? I am a student in University. I ❤️ Python, Flutter, VSCode, Machine Learning.\nComputer Skills  Python Flutter(contributor) \u0026amp; Dart C/C++ Java(little)  My Computers Computers which I use.\n  Macbook Pro 13inch 2017\n   Parts Model     OS macOS 11   CPU Intel Corei5 7360U   Memory 8GB 2133 MHz   SSD 256GB      Self build PC (Family sharing)","title":"About"}]