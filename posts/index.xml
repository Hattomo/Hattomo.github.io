<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hattomo</title>
    <link>https://hattomo.github.io/posts/</link>
    <description>Recent content in Posts on Hattomo</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 13 Feb 2021 11:48:30 +0900</lastBuildDate><atom:link href="https://hattomo.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HugoでGoogle Analytics 4を利用する</title>
      <link>https://hattomo.github.io/posts/21/q1/0213-newgoogleanalytics/</link>
      <pubDate>Sat, 13 Feb 2021 11:48:30 +0900</pubDate>
      
      <guid>https://hattomo.github.io/posts/21/q1/0213-newgoogleanalytics/</guid>
      <description>はじめに 様々なサイトに導入されているGoogle Analyticsですが、2020年より新たにGoogle Analytics 4(以下GA4)が、導入されました。しかしHugoでは、標準ではまだ対応していません。(これを書いているときの最新バージョンは0.80です)しかし、HugoではGA4を簡単に利用することができます。
GA4を導入する GoogleAnalytics にアクセスし、GA4のIDを取得します。その方法はここでは省略します。GA4のIDはG-xxxxxxxxxxのようにGから始まります。UAから始まっている場合は、従来のIDです。
IDが取得出来たら、Hugoのフォルダtheme/layoutの適当なところに新規HTMLファイルを作成し、以下のように追記します。
 analytics-gtag.html  &amp;lt;!-- Global site tag (gtag.js) - Google Analytics 4--&amp;gt; &amp;lt;script async src=&amp;#34;https://www.googletagmanager.com/gtag/js?id={{ .Site.GoogleAnalytics }}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } gtag(&amp;#39;js&amp;#39;, new Date()); gtag(&amp;#39;config&amp;#39;, &amp;#39;{{ .Site.GoogleAnalytics }}&amp;#39;); &amp;lt;/script&amp;gt; 次に、configファイルに移動し、GoogleAnalyticsのIDを設定します。ymlの場合は、以下のようになります。
GoogleAnalytics:G-xxxxxxxx最後にこれらの設定を読み込みます。theme/layouts/partials/head.htmlのファイルの一番下のほうにある外部ファイルの読み込みを修正します。google_analytics_asyncは従来のgoogle analyticsなので消します。逆に、先ほど作成したファイルのパスを下のように追記します。
～省略～ {{- template &amp;#34;_internal/google_analytics_async.html&amp;#34; . }} &amp;lt;!--Delete--&amp;gt; {{- template &amp;#34;{path to file}/analytics-gtag.html&amp;#34; . }} &amp;lt;!--Add GA4--&amp;gt; {{- template &amp;#34;_internal/google_news.html&amp;#34; . }} {{- template &amp;#34;partials/templates/opengraph.</description>
    </item>
    
    <item>
      <title>VSCodeのデフォルトフォントを確認する方法</title>
      <link>https://hattomo.github.io/posts/21/q1/0213-vscodedefaultfont/</link>
      <pubDate>Sat, 13 Feb 2021 10:41:23 +0900</pubDate>
      
      <guid>https://hattomo.github.io/posts/21/q1/0213-vscodedefaultfont/</guid>
      <description>はじめに MicrosoftのVSCodeでデフォルトのフォントを確認する方法です。先日、このサイトのほかのページにコードを書いたところ、macOSではきれいに表示されていましたが、Windowsでは汚いフォントで表示されていました。もちろんCSSをいじってFont-Familyを設定すればいいわけですが、どれを設定すればいいかわからない！ってことでVSCodeのデフォルトのフォントと同じフォントを設定すればきれいではないかと思い調べました。
方法 シンプルにソースコードを見に行くのが早いでしょう(たぶん)。ソースコードは、GitHubのmicrosoft/vscodeで公開されており、そのなかでフォントを指定している部分はここです。27~29行目を見ると、以下のような記述があります。
.mac { --monaco-monospace-font: &amp;#34;SF Mono&amp;#34;, Monaco, Menlo, Courier, monospace; } .windows { --monaco-monospace-font: Consolas, &amp;#34;Courier New&amp;#34;, monospace; } .linux { --monaco-monospace-font: &amp;#34;Ubuntu Mono&amp;#34;, &amp;#34;Liberation Mono&amp;#34;, &amp;#34;DejaVu Sans Mono&amp;#34;, &amp;#34;Courier New&amp;#34;, monospace; } どうやら、OSによって異なるフォントを使っているようです。macOSではSF Mono、WindowsではConsolas、LinuxではUbuntu Monoのようです。Linuxの最初がUbuntu Monoなので、LinuxでVSCodeを利用する人は、Ubuntuが一番多そうです。このサイトのCSSにも、これらのフォントを指定しておきました。</description>
    </item>
    
    <item>
      <title>Useful Python commands</title>
      <link>https://hattomo.github.io/posts/21/q1/0210-python-commands/</link>
      <pubDate>Wed, 10 Feb 2021 00:48:03 +0900</pubDate>
      
      <guid>https://hattomo.github.io/posts/21/q1/0210-python-commands/</guid>
      <description>Python Environment Python便利なコマンドのメモです。
venv # if you do not have venv # linux $ sudo apt install python3-venv # create virtual environment $ python3 -m venv [/path/to/new/virtual/environment] # activate $ cd [environment name] $ source [environment name]/bin/activate # deactivate $ deactivate Module input &amp;amp; output $ pip3 freeze &amp;gt; requirements.txt $ pip3 install -r requirements.txt Install and Run Jupyter Notebook # install $ pip3 install jupyter #Run $ jupyter notebook # or $ python3 -m notebook # After seconds, Press Ctrl+C to show URL OpenCV # install $ pip3 install opencv-python # python # useage import cv2 </description>
    </item>
    
    <item>
      <title>How to install and use Hugo</title>
      <link>https://hattomo.github.io/posts/21/q1/0127-howtousehugo/</link>
      <pubDate>Wed, 27 Jan 2021 13:33:06 +0900</pubDate>
      
      <guid>https://hattomo.github.io/posts/21/q1/0127-howtousehugo/</guid>
      <description>Hugo をインストールする homebrewを利用した方法が、一般的なようでしたが、Install hugoを参考にGitHubからバイナリをダウンロードし、解凍したhugoの実行ファイルを/usr/local/binに配置しました。
テーマを決める テーマは少し迷いましたが、hugo-PaperModにしました。開発が活発に続けられていたこと、ドキュメントが整備されていたこと、デザインが気に入ったためです。
gitのサブモジュールに登録します。
git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 git submodule update --init --recursive 今後テーマをアップデートするためには、以下のコマンドを実行します。
git submodule update --remote --merge 新規記事を作成する 以下のコマンドを実行します。
hugo new posts/{path to new file}.md Hugo ローカルサーバーを立ち上げる hugo server -D テーマを編集する テーマをフォークし、次のような変更を行いました(行う予定です)。
 文字サイズの変更 google analytics の追加 klatexのサポート Syntax Highlightingの設定 前回の記事、次の記事へのリンクの追加  GitHubにpushしたらdeployが行われるよう設定する GitHub actionを利用して、自動的にgithub-pagesにdeployが行われるように設定します。 peaceiris/actions-hugo@v2とpeaceiris/actions-gh-pages@v3を利用しました。
Reference  https://gohugo.io/getting-started/quick-start/ https://github.com/adityatelange/hugo-PaperMod  </description>
    </item>
    
  </channel>
</rss>
